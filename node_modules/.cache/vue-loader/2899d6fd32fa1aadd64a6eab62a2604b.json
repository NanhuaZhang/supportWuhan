{"remainingRequest":"/Users/nanhuazhang/IdeaProjects/jira_test_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nanhuazhang/IdeaProjects/jira_test_vue/src/views/jira-request/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nanhuazhang/IdeaProjects/jira_test_vue/src/views/jira-request/index.vue","mtime":1574762895031},{"path":"/Users/nanhuazhang/IdeaProjects/jira_test_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nanhuazhang/IdeaProjects/jira_test_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nanhuazhang/IdeaProjects/jira_test_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nanhuazhang/IdeaProjects/jira_test_vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  fetchUserList,\n  fetchWeeklyReport,\n  fetchLastWeeklyReport, fectchJiraList\n} from '@/api/workPlat'\nimport { getActiveVersions } from '@/api/version'\nimport saveAs from 'file-saver'\n\nexport default {\n  name: 'JiraRequest',\n  filters: {\n    getName: function(value) {\n      if (value == null) {\n        return null\n      }\n      return value.displayName.split('@')[0]\n    }\n  },\n  data() {\n    return {\n      jira_versions: [],\n      // 筛选条件\n      form_user: '',\n      form_version: [],\n      // fields: [{\"label\": \"名称\", \"key\": \"summary\", \"disable\": 0}, {\"label\": \"状态\", \"key\": \"summary\", \"disable\": 0},{\"label\": \"产品\", \"key\": \"fields.customfield_10306.displayName\"}],\n      fields: 'summary,customfield_11200,issuetype,customfield_10307,customfield_10308,customfield_11003,customfield_11002,customfield_10304,customfield_10305,customfield_10306,duedate,issuelinks,subtasks,status',\n      //\n      jira_tables: [],\n      //\n      users: [],\n      loadingShown: false\n    }\n  },\n  computed: {\n    qa_efforts() {\n      let effort = 0\n      this.jira_tables.forEach(issue => {\n        effort += issue.fields.customfield_11003\n      })\n      return effort.toFixed(2)\n    },\n    dev_efforts() {\n      let effort = 0\n      this.jira_tables.forEach(issue => {\n        effort += issue.fields.customfield_11002\n      })\n      return effort.toFixed(2)\n    },\n    status_list() {\n      const status_list = new Set()\n      this.jira_tables.forEach(issue => {\n        status_list.add(issue.fields.status.name)\n      })\n      const result = []\n      Array.from(status_list).forEach(status => {\n        result.push({\n          'text': status,\n          'value': status\n        })\n      })\n      return result\n    }\n  },\n  created: function() {\n    this.get_users()\n    this.get_jira_versions()\n  },\n  methods: {\n    get_jira_versions() {\n      getActiveVersions().then((response) => {\n        console.log(response.data)\n        this.jira_versions = response.data\n      }).catch(function(error) {\n        // handle error\n        console.log(error)\n      }).finally(function() {\n        // always executed\n      })\n    },\n    status_filter(value, row, column) {\n      console.log(value, row, column)\n      // const property = column['property'];\n      return row.fields.status.name === value\n    },\n    // qa delay marked\n    qaDelay({ row, rowIndex }) {\n      if (row.delay_reason.length > 1) {\n        return 'warning-row'\n      }\n      return ''\n    },\n    get_users() {\n      fetchUserList().then((response) => {\n        console.log(response.data)\n        // this.getVersion();\n        this.users = response.data\n      }).catch(function(error) {\n        // handle error\n        console.log(error)\n      }).finally(function() {\n        // always executed\n      })\n    },\n    qa_time_sort(a, b) {\n      a = a.fields.customfield_10305\n      b = b.fields.customfield_10305\n      if (a == null && b == null) {\n        return 0\n      }\n      if (a == null) {\n        return -1\n      }\n      if (b == null) {\n        return 1\n      }\n      return a >= b ? 1 : -1\n    },\n    jiraShown() {\n      if (this.form_user === '' && this.form_version.length === 0) {\n        this.$message({\n          showClose: true,\n          type: 'warning',\n          message: '用户和所选版本不能同时为空'\n        })\n        return\n      }\n      this.loadingShown = true\n      const postJson = {\n        'role': this.form_user.group,\n        // \"user\": this.form_user,\n        'user': this.form_user.email,\n        'version': this.form_version.join(','),\n        'fields': this.fields\n      }\n      console.log(postJson)\n      fectchJiraList(postJson).then((response) => {\n        console.log(response.data)\n        this.jira_tables = response.data\n        this.$message({\n          showClose: true,\n          message: '获取成功',\n          type: 'success'\n        })\n        this.loadingShown = false\n      }).catch(function(error) {\n        // handle error\n        console.log(error)\n        this.loadingShown = false\n      }).finally(function() {\n        // always executed\n        console.log('test')\n      })\n    },\n    generate_weekly_report() {\n      if (this.form_user === '') {\n        this.$message({\n          showClose: true,\n          message: '请选择用户生成周报！',\n          type: 'warning'\n        })\n        return\n      }\n      const postJson = {\n        'user_email': this.form_user.email,\n        'role': this.form_user.group\n      }\n      fetchWeeklyReport(postJson).then((response) => {\n        console.log(response.data)\n        this.$message({\n          showClose: true,\n          message: '生成成功',\n          type: 'success'\n        })\n        var file = new File([response.data], 'weekly_report.md', { type: 'text/plain;charset=utf-8' })\n        saveAs(file)\n      }).catch(function(error) {\n        // handle error\n        console.log(error)\n      }).finally(function() {\n        // always executed\n        console.log('test')\n      })\n    },\n    generate_last_weekly_report() {\n      if (this.form_user === '') {\n        this.$message({\n          showClose: true,\n          message: '请选择用户生成周报！',\n          type: 'warning'\n        })\n        return\n      }\n      const postJson = {\n        'user_email': this.form_user.email,\n        'role': this.form_user.group\n      }\n      fetchLastWeeklyReport(postJson).then((response) => {\n        console.log(response.data)\n        this.$message({\n          showClose: true,\n          message: '生成成功',\n          type: 'success'\n        })\n        var file = new File([response.data], 'last_weekly_report.md', { type: 'text/plain;charset=utf-8' })\n        saveAs(file)\n      }).catch(function(error) {\n        // handle error\n        console.log(error)\n      }).finally(function() {\n        // always executed\n        console.log('test')\n      })\n    }\n  }\n}\n",null]}